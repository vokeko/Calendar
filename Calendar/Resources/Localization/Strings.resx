<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddItem" xml:space="preserve">
    <value>Add event</value>
  </data>
  <data name="Backup" xml:space="preserve">
    <value>Backup</value>
  </data>
  <data name="BackupPath" xml:space="preserve">
    <value>Backup path</value>
  </data>
  <data name="BinExtension" xml:space="preserve">
    <value>Binary files</value>
  </data>
  <data name="Calendar" xml:space="preserve">
    <value>Calendar</value>
  </data>
  <data name="CalendarBrowse" xml:space="preserve">
    <value>Browsing calendar</value>
  </data>
  <data name="ChooseEvent" xml:space="preserve">
    <value>Choose event</value>
  </data>
  <data name="ChosenDate" xml:space="preserve">
    <value>Chosen date</value>
  </data>
  <data name="ChosenEvent" xml:space="preserve">
    <value>Chosen event</value>
  </data>
  <data name="Color" xml:space="preserve">
    <value>Color</value>
  </data>
  <data name="Confirm" xml:space="preserve">
    <value>Confirm</value>
  </data>
  <data name="Daily" xml:space="preserve">
    <value>Daily</value>
  </data>
  <data name="Data" xml:space="preserve">
    <value>Data</value>
  </data>
  <data name="Date" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="DeleteItem" xml:space="preserve">
    <value>Delete event</value>
  </data>
  <data name="Desc" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="EditItem" xml:space="preserve">
    <value>Edit event</value>
  </data>
  <data name="EmptyString" xml:space="preserve">
    <value>cannot be empty</value>
  </data>
  <data name="EnterDate" xml:space="preserve">
    <value>Please choose date</value>
  </data>
  <data name="EnterTitle" xml:space="preserve">
    <value>Please enter description</value>
  </data>
  <data name="Event" xml:space="preserve">
    <value>Event</value>
  </data>
  <data name="EventsDay" xml:space="preserve">
    <value>Events of the day:</value>
  </data>
  <data name="EventView" xml:space="preserve">
    <value>Event view</value>
  </data>
  <data name="Export" xml:space="preserve">
    <value>Export</value>
  </data>
  <data name="ExportDesc" xml:space="preserve">
    <value>Export data as a text file</value>
  </data>
  <data name="FaultyObject" xml:space="preserve">
    <value>Non-compatible data object</value>
  </data>
  <data name="Frequency" xml:space="preserve">
    <value>Frequency</value>
  </data>
  <data name="Highlight" xml:space="preserve">
    <value>Highlight color</value>
  </data>
  <data name="HoursNaN" xml:space="preserve">
    <value>Hours have to be a valid number</value>
  </data>
  <data name="HoursRange" xml:space="preserve">
    <value>Minutes have to be between 0-23</value>
  </data>
  <data name="Language" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="LoadData" xml:space="preserve">
    <value>Load data</value>
  </data>
  <data name="LoadDataDesc" xml:space="preserve">
    <value>Load data from file</value>
  </data>
  <data name="LoadError" xml:space="preserve">
    <value>Error loading data</value>
  </data>
  <data name="Localization" xml:space="preserve">
    <value>Localization</value>
  </data>
  <data name="Location" xml:space="preserve">
    <value>Location</value>
  </data>
  <data name="MinutesNaN" xml:space="preserve">
    <value>Minutes have to be a valid number</value>
  </data>
  <data name="MinutesRange" xml:space="preserve">
    <value>Minutes have to be between 0-59</value>
  </data>
  <data name="Monthly" xml:space="preserve">
    <value>Monthly</value>
  </data>
  <data name="NewEvent" xml:space="preserve">
    <value>New event</value>
  </data>
  <data name="NewObject" xml:space="preserve">
    <value>New object successfully created</value>
  </data>
  <data name="NextWeek" xml:space="preserve">
    <value>This week</value>
  </data>
  <data name="None" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="OlderThanNow" xml:space="preserve">
    <value>Total time can't be greater than current time</value>
  </data>
  <data name="OlderThanToday" xml:space="preserve">
    <value>Chosen date can't be greater than today</value>
  </data>
  <data name="Quarterly" xml:space="preserve">
    <value>Quarterly</value>
  </data>
  <data name="Repeat" xml:space="preserve">
    <value>Repeat?</value>
  </data>
  <data name="SaveData" xml:space="preserve">
    <value>Save data</value>
  </data>
  <data name="SaveDataDesc" xml:space="preserve">
    <value>Save data to file</value>
  </data>
  <data name="SaveError" xml:space="preserve">
    <value>Error saving data</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="ShowAll" xml:space="preserve">
    <value>Show all events</value>
  </data>
  <data name="ShowItem" xml:space="preserve">
    <value>Show event</value>
  </data>
  <data name="Styles" xml:space="preserve">
    <value>Styles</value>
  </data>
  <data name="SuccessfulAdd" xml:space="preserve">
    <value>Event successfully added</value>
  </data>
  <data name="SuccessfulDelete" xml:space="preserve">
    <value>Event successfully deleted</value>
  </data>
  <data name="SuccessfulEdit" xml:space="preserve">
    <value>Event successfully edited</value>
  </data>
  <data name="Time" xml:space="preserve">
    <value>Time</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>Title</value>
  </data>
  <data name="Today" xml:space="preserve">
    <value>Today</value>
  </data>
  <data name="TxtExtension" xml:space="preserve">
    <value>Text files</value>
  </data>
  <data name="Weekly" xml:space="preserve">
    <value>Weekly</value>
  </data>
  <data name="WrongDate" xml:space="preserve">
    <value>Wrong date!</value>
  </data>
  <data name="Yearly" xml:space="preserve">
    <value>Yearly</value>
  </data>
</root>